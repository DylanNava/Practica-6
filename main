#include <iostream>
#include <string>
#include "persona.h"
#define TAM 10

using namespace std;

template<class T>
class Cola{
private:
    T datos[TAM];
    int ult;
    bool inserta(T , int);
    bool elimina(int);
    T recupera(int)const;
    int primero()const;
    int ultimo()const;
public:
    Cola():ult(-1){}
    bool vacia()const;
    bool llena()const;
    bool  Queue(T& elem);
    bool Dequeue();
    int buscar(T& elem);
    T Front()const;
};


template<class T>
T Cola<T>::Front()const{
    T x=datos[primero()];
    return x;
}

template<class T>
bool Cola<T>::Dequeue(){
    if(vacia()){
        return false;
    }
    else{
        elimina(primero());
    }
    return true;
}

template<class T>
bool Cola<T>::Queue(T& elem){
    if(llena()){
        return false;
    }
    if(vacia()){
        inserta(elem,0);
    }
    else{
        inserta(elem, ultimo()+1);
    }
    return true;
}

template<class T>
bool Cola<T>::vacia()const{
    return ult==-1;
}

template<class T>
bool Cola<T>::llena()const{
    return ult==TAM-1;
}

template<class T>
bool Cola<T>::inserta(T elem, int pos){
    if(llena() || pos<0 || pos>ult+1){
        cout<<"\n No se pudo insertar";
        return false;
    }
    int i=ult+1;
    while(i>pos){
        datos[i]=datos[i-1];
        i--;
    }
    datos[pos]=elem;
    ult++;
    return true;
}

template<class T>
bool Cola<T>::elimina(int pos){
    if(vacia() || pos<0 || pos>ult){
        cout<<"\n No se pudo eliminar";
        return false;
    }
    int i=pos;
    while(i<ult){
        datos[i]=datos[i+1];
        i++;
    }
    ult--;
    return true;
}

template<class T>
T Cola<T>::recupera(int pos)const{
    if(vacia() || pos<0 || pos>ult-1){
        cout<<"\n Insuficiencia de datos";
        //Manejar exceptions
    }
    else{
       return datos[pos];
    }
}

template<class T>
int Cola<T>::primero()const{
    if(vacia()){
       return -1;
    }
    return 0;
}

template<class T>
int Cola<T>::ultimo()const{
    if(vacia()){
       return -1;
    }
    return ult;
}

template<class T>
int Cola<T>::buscar(T& elem){
    for(int i=0; i < TAM; i++){
        if(datos[i]==elem){
            return i;
        }
    }
    return -1;
}


int main() {
    Alumno alumno;
    Cola<Alumno> cola;
    string aux;
    int intAux;
    int opc;
    char bandera;

    do{
        system("cls");
        cout << "MENU"<<endl<<endl;
        cout << "1) Alta de un alumno"<<endl;
        cout << "2) Elaborar constancia"<<endl;
        cout << "3) Buscar"<<endl;
        cout << "4) Salir"<<endl;
        cout << "Respuesta:";
        cin >> opc;
        switch(opc){
    case 1:
        system("cls");
        cout << "Nombre del alumno:";
        cin >> alumno.nombre;
        cout << "Carrera del alumno:";
        cin >> alumno.carrera;
        cout << "Materias aprobadas:";
        cin >> alumno.materiasAprobadas;
        cout << "Promedio general:";
        cin >> alumno.promedioGeneral;
        cola.Queue(alumno);
        break;
    case 2:
        system("cls");
        if(!cola.vacia()){
                Alumno alumno = cola.Front();
                cout << "Constancia elaborada para el siguiente alumno:" << endl;
                cout << cola.Front() << endl;
                cola.Dequeue();
        }
        else
        {
            cout<<"Cola Vacia";
        }
        break;
    case 3:
        system("cls");
        cout << "Ingrese el nombre del alumno a buscar:";
        cin >> alumno.nombre;
        intAux = cola.buscar(alumno);
        if(intAux==-1)
            cout << "El alumno no se encuentra registrado";
        else
            cout << "Necesita realizar "<<intAux<< " mas para llegar al alumno buscado"<<endl;
        break;

    default:
        return 0;
        break;
        }
        cout << "Repetir el programa? s/n:";
        cin >> bandera;
    }while(bandera=='S'||bandera=='s');
    return 0;
}
